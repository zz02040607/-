/*******************************************快速排序（从小到大）******************************************************/
/*函数返回一个position，使得position以左的元素小于基准元素，position以右的元素大于基准元素*/
int Partition(int a[],int p,int r)
{
    int x=a[p];
    int i=p,j=r+1;
    while(True)
    {
        while([++i]<x&&i<r);
       while([--j]>x&&j>p);
       if(i>=j) break;
       swap(a[i],a[j]);
    }
    a[p]=a[j];
    a[j]=x;
    return j;
}
/***对整个函数递归调用***/
void QuickSort (int a[], int p, int r)
{
      if (p<r) {
        int q=Partition(a,p,r);
        QuickSort (a,p,q-1); //对左半段排序
        QuickSort (a,q+1,r); //对右半段排序
        }
}







/**************************************************************************希尔排序*******************************************************************/
void ShellSort(int a[],int n)
{
    int i,j,k,d,temp;
    for(d=n/2;d>=1;d=d/2)
    {
        for(i=0;i<d;i++)
        {
            for(j=i+d;j<n;j=j+d)
            {
                temp=a[j];
                k=j-d;
                while(k>=0&&a[k]>temp)
                {
                    a[k+d]=a[k];
                    k=k-d;
                }
                a[k+d]=temp;
            }
        }
    }
}



//希尔排序
void ShellSort(int A[],int n){
	int d,i,j,temp;
	for(d=n/2;d>=1;d=d/2){
		for(i=d;i<n;i++){//增量为i++，即各个子表交错处理 
			if(A[i]<A[i-d]){
				temp=A[i];
				for(j=i-d;j>=0&&temp<A[j];j-=d){
					A[j+d]=A[j];
				}
				A[j+d]=temp;
			}
		}
	}
}






/***********************************************************插入排序**************************************************************/
void InsertSort(int a[],int l)
{
    int temp,j;
    for(int i=1;i<l;i++)
    {
        if(a[i]<a[i-1])
        {
            temp=a[i];
        }
        for(j=i-1;j>=0&&a[j]>temp;j--)
        {
            a[j+1]=a[j];
        }
        a[j+1]=temp;
    }
}








/******************************************************选择排序***************************************************************/
void Select_Sort(int a[],int n)
{
    int minn;
    for(int i=1;<=n;i++)
    {
        minn=i;
        for(int j=i;j<=n;j++)
        {
            if(a[j]<a[minn])
            {
                minn=j;
            }
        }
        if(j!=i)
        {
             swap(a[i],a[minn]);
        }
       
    }
}




