
/**********************************************动态规划（自下而上）解决矩阵最小乘法次数问题***************************************************/
void MartixChain(int *p,int *n,int **m,int **s)
{
    /*初始化对角线*/
    for(int i=1;i<=n;i++)
    {
        m[i][i]=0;
    }
    for (int r=2;r<=n;r++)     /*外循环控制链长*/
    {
        for(int i=1;i<n-r+1;i++)     /*中循环i控制起点*/
        {
            int j=i+r-1;                     /*j控制终止位置*/
            m[i][j]=m[i+1][j]+p[i-1]*p[i]*p[j];     /*先对m[i][j]初始化，分成i，（i+1，j）两部分其实*/
            s[i][j]=i;
            for (int k=i+1;k<j;k++)     /*遍历(i,j)中的每一个位置，寻找最优*/
            {
                int t=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j];
                if(t<m[i][j])
                {
                    m[i][j]=t;
                    s[i][j]=k;
                }
            }
        }
    }
    
}



/*****************************************************************递归方式解决*******************************************************************/
int RecurMartrixChain(int i,int j)
{
    if(i==j) return 0;
    int u=RecurMartrixChain(i,i)+RecurMartrixChain(i+1,j)+p[i-1]*p[i]*p[j];
    s[i][j]=1;
    for(int k=i+1;k<j;k++)
    {
        int t=RecurMartrixChain(i,k)+RecurMartrixChain(k+1,j)+p[--1]*p[k]*p[j];
        if(t<u)
        {
            u=t;
            s[i][j]=k;
        }
    }
    return u;
}

/*********trace路径*********/
void TraceBack(int i,int j,int **s)     /*查找i到j的最小乘法路径*/
{
    if(i==j) break;
    TraceBack(i,s[i][j],s);
    TraceBack(s[i][j]+1,j,s);
    cout<<"Multiply A"<<i<<","<<s[i][j];  
    cout<<"and A"<<s[i][j]+1<<","<<j<<endl; 
}





/**************************************************************************************最大子段和***************************************************************************/
              /*************************形参列表*************************/
                  /***n代表元素个数***/
                  /***a代表数组指针***/
                  /***c数组用于记录在最大子段中是否含有该元素***/
                  /***d用于记录数组中最大子段的位置***/
/******动态规划，自底向上******/
int MaxSum(int n,int a,int c,int d)
{
    int sum=0;b[0]=0;
    for(int i=1;i<=n;i++)
    {
        if(b[i-1]>0)
        {
            b[i]=b[i-1]+a[i];
            c[i]=1;
        }
        else
        {
            b[i]=a[i];
            c[i]=0;
        }
        if(b[i]>sum)
        {
            sum=b[i];
            (*d)=i;
        }
    }
    return sum;
}

/******构造最优解*****/
void output(int *c,int d)
{
    int i=d;
    do
    {
        if(i==d)
        {
            print("=%d",a[i]);
        }
        else
        {
            print("+%d",a[i])
        }
        while(c[i--]==1);
    }
}





/***********************************************************最长公共子序列问题**************************************************************/
实现细节：
1、序列str1和序列str2
 
  ·长度分别为m和n；
  ·创建1个二维数组L[m.n]；
    ·初始化L数组内容为0
    ·m和n分别从0开始，m++，n++循环：
       - 如果str1[m] == str2[n]，则L[m,n] = L[m - 1, n -1] + 1；
       - 如果str1[m] != str2[n]，则L[m,n] = max{L[m,n - 1]，L[m - 1, n]}
    ·最后从L[m,n]中的数字一定是最大的，且这个数字就是最长公共子序列的长度
    ·从数组L中找出一个最长的公共子序列
实现细节：
2、从数组L中查找一个最长的公共子序列

   i和j分别从m，n开始，递减循环直到i = 0，j = 0。其中，m和n分别为两个序列的长度。
  ·如果str1[i] == str2[j]，则将str[i]字符插入到子序列内，i--，j--；
  ·如果str1[i] != str[j]，则比较L[i,j-1]与L[i-1,j]，L[i,j-1]大，则j--，否则i--；（如果相等，则任选一个）
/***********************************最长公共子序列问题************************************/
void LCSLength(int m,int n,char *x,char *y,int **c,int **b)
{
    int i,j;
    for(int i=1;i<=m;i++)
    {
        c[i][0]=0;
    }
    for (i = 1; i <= n; i++) c[0][i] = 0;
    for (i = 1; i <= m; i++)
          for (j = 1; j <= n; j++)
            {
             if (x[i]==y[j]) { 
                  c[i][j]=c[i-1][j-1]+1; b[i][j]=1;}
             else if (c[i-1][j]>=c[i][j-1]) {
                  c[i][j]=c[i-1][j]; b[i][j]=2;}
             else { c[i][j]=c[i][j-1]; b[i][j]=3; }
             }

}
/*********************构造最长公共子序列*********************************/
void LCS(int i，int j，char *x，int **b)
{
      if (i ==0 || j==0) return;
      if (b[i][j]== 1){ LCS(i-1，j-1，x，b); cout<<x[i]; }
      else if (b[i][j]== 2) LCS(i-1，j，x，b);
      else LCS(i，j-1，x，b);
}












/******************************************************0-1背包问题************************************************************/
/*******************形参列表*****************/
/***f[i][j]用于记录当背包容量为j时，前i件物品的最大价值***/
/***w[i]用于记录每件物品的体积***/
/***v[i]用于记录没见物品的价值***/
/***n表示物品的件数***/
/***m表示背包的最大容量***/
int fun(int n,int m)
{
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(j<w[i])
            {
                f[i][j]=f[i-1][j];
            }
            else 
            {
                f[i][j]=max{f[i-1][j],f[i-1][j-w[i]]+v[i]};
            }
        }
        return f[n][m];
    }
}


/*********回溯输出所选择的物品*************/
void printSelectedItems(int n, int m) {
    vector<int> selected;
    int j = m;
    for(int i = n; i > 0; i--) {
        if(f[i][j] != f[i-1][j]) {  // 如果当前物品被选择
            selected.push_back(i);
            j -= w[i];  // 剩余容量减少
        }
    }
